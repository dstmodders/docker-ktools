name: CI

on:
  push:
    branches:
      - develop
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        ktools:
          - ktools-version: 4.4.0
            imagemagick-version: 6.9.12-19
            latest: false
            root: ./official
          - ktools-version: 4.4.1
            imagemagick-version: 6.9.12-19
            latest: false
            root: ./latest
          - ktools-version: 4.5.0
            imagemagick-version: 7.1.0-5
            latest: true
            root: ./latest
    steps:
      - name: Check out
        uses: actions/checkout@v2
      - name: Set a job-wide environment variables
        run: |
          echo "BRANCH_NAME=${GITHUB_REF##*/}" >> $GITHUB_ENV
          echo "DS_KTOOLS_VERSION=${{ matrix.ktools.ktools-version }}" >> $GITHUB_ENV
          echo "GITHUB_JOB_NAME=build" >> $GITHUB_ENV
          echo "IMAGEMAGICK_VERSION=${{ matrix.ktools.imagemagick-version }}" >> $GITHUB_ENV
          echo "ROOT=${{ matrix.ktools.root }}" >> $GITHUB_ENV
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: Login to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}
      - name: Docker meta for a Debian image
        id: debian-meta
        uses: docker/metadata-action@v3
        with:
          images: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/ktools
            ghcr.io/${{ github.repository_owner }}/ktools
          labels: |
            maintainer=victor@popkov.me
          tags: |
            type=raw,value=${{ env.DS_KTOOLS_VERSION }}
            type=raw,value=${{ env.DS_KTOOLS_VERSION }}-debian
            type=raw,value=${{ env.DS_KTOOLS_VERSION }}-imagemagick-${{ env.IMAGEMAGICK_VERSION }}-debian
            ${{ matrix.ktools.latest && 'type=raw,value=debian' || '' }}
      - name: Build a Debian image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ${{ env.ROOT }}/debian/Dockerfile
          platforms: linux/amd64
          pull: true
          push: ${{ !env.ACT && github.ref == 'refs/heads/master' }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/ktools:${{ env.DS_KTOOLS_VERSION }}-imagemagick-${{ env.IMAGEMAGICK_VERSION }}-debian
          cache-to: type=inline
          build-args: |
            DS_KTOOLS_VERSION=${{ env.DS_KTOOLS_VERSION }}
            IMAGEMAGICK_VERSION=${{ env.IMAGEMAGICK_VERSION }}
          tags: ${{ steps.debian-meta.outputs.tags }}
          labels: ${{ steps.debian-meta.outputs.labels }}
      - name: Docker meta for an Alpine image
        id: alpine-meta
        uses: docker/metadata-action@v3
        with:
          images: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/ktools
            ghcr.io/${{ github.repository_owner }}/ktools
          flavor: |
            latest=${{ matrix.ktools.latest }}
          labels: |
            maintainer=victor@popkov.me
          tags: |
            type=raw,value=${{ env.DS_KTOOLS_VERSION }}
            type=raw,value=${{ env.DS_KTOOLS_VERSION }}-alpine
            type=raw,value=${{ env.DS_KTOOLS_VERSION }}-imagemagick-${{ env.IMAGEMAGICK_VERSION }}-alpine
            ${{ matrix.ktools.latest && 'type=raw,value=alpine' || '' }}
      - name: Build an Alpine image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ${{ env.ROOT }}/alpine/Dockerfile
          platforms: linux/amd64
          pull: true
          push: ${{ !env.ACT && github.ref == 'refs/heads/master' }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/ktools:${{ env.DS_KTOOLS_VERSION }}-imagemagick-${{ env.IMAGEMAGICK_VERSION }}-alpine
          cache-to: type=inline
          build-args: |
            DS_KTOOLS_VERSION=${{ env.DS_KTOOLS_VERSION }}
            IMAGEMAGICK_VERSION=${{ env.IMAGEMAGICK_VERSION }}
          tags: ${{ steps.alpine-meta.outputs.tags }}
          labels: ${{ steps.alpine-meta.outputs.labels }}
      - name: Prepare success Slack notification
        if: success()
        run: echo "SLACK_CUSTOM_PAYLOAD=${SLACK_CUSTOM_PAYLOAD}" >> $GITHUB_ENV
        env:
          SLACK_CUSTOM_PAYLOAD: '{"channel":"${{ secrets.SLACK_CHANNEL }}","attachments":[{"color":"#2eb886","fallback":"GitHub Actions {{ GITHUB_WORKFLOW }} workflow {{ GITHUB_JOB_NAME }} job v{{ DS_KTOOLS_VERSION }} of {{ GITHUB_REPOSITORY }}@{{ BRANCH_NAME }} by {{ GITHUB_ACTOR }} has passed","blocks":[{"type":"section","text":{"type":"mrkdwn","text":"GitHub Actions *<https://github.com/{{ GITHUB_REPOSITORY }}/actions/runs/{{ GITHUB_RUN_ID }}|{{ GITHUB_WORKFLOW }}>* workflow *{{ GITHUB_JOB_NAME }}* job *v{{ DS_KTOOLS_VERSION }}* of *<https://github.com/{{ GITHUB_REPOSITORY }}|{{ GITHUB_REPOSITORY }}>@<https://github.com/{{ GITHUB_REPOSITORY }}/tree/{{ BRANCH_NAME }}|{{ BRANCH_NAME }}>* by *{{ GITHUB_ACTOR }}* has passed"}}]}]}'
      - name: Prepare failure Slack notification
        if: failure()
        run: echo "SLACK_CUSTOM_PAYLOAD=${SLACK_CUSTOM_PAYLOAD}" >> $GITHUB_ENV
        env:
          SLACK_CUSTOM_PAYLOAD: '{"channel":"${{ secrets.SLACK_CHANNEL }}","attachments":[{"color":"#ed2f00","fallback":"GitHub Actions {{ GITHUB_WORKFLOW }} workflow {{ GITHUB_JOB_NAME }} job v{{ DS_KTOOLS_VERSION }} of {{ GITHUB_REPOSITORY }}@{{ BRANCH_NAME }} by {{ GITHUB_ACTOR }} has failed","blocks":[{"type":"section","text":{"type":"mrkdwn","text":"GitHub Actions *<https://github.com/{{ GITHUB_REPOSITORY }}/actions/runs/{{ GITHUB_RUN_ID }}|{{ GITHUB_WORKFLOW }}>* workflow *{{ GITHUB_JOB_NAME }}* job *v{{ DS_KTOOLS_VERSION }}* of *<https://github.com/{{ GITHUB_REPOSITORY }}|{{ GITHUB_REPOSITORY }}>@<https://github.com/{{ GITHUB_REPOSITORY }}/tree/{{ BRANCH_NAME }}|{{ BRANCH_NAME }}>* by *{{ GITHUB_ACTOR }}* has failed"}}]}]}'
      - name: Send Slack notification
        if: ${{ !env.ACT && always() }}
        uses: Ilshidur/action-slack@2.1.0
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v2
      - name: Set a job-wide environment variables
        run: |
          echo "BRANCH_NAME=${GITHUB_REF##*/}" >> $GITHUB_ENV
          echo "GITHUB_JOB_NAME=lint" >> $GITHUB_ENV
      - name: Set up Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 12.x
      - name: Install Prettier
        run: yarn global add prettier
      - name: Lint
        continue-on-error: true
        id: lint
        run: |
          # Prettier
          export LINT_ISSUES_PRETTIER=$(prettier --list-different . | wc -l)
          export LINT_ISSUES_PRETTIER=$((LINT_ISSUES_PRETTIER < 0 ? 0 : LINT_ISSUES_PRETTIER))

          # Issues
          export LINT_ISSUES="${LINT_ISSUES_PRETTIER}"

          # env
          echo "LINT_ISSUES=${LINT_ISSUES}" >> $GITHUB_ENV
          echo "LINT_ISSUES_PRETTIER=${LINT_ISSUES_PRETTIER}" >> $GITHUB_ENV

          # lint
          prettier --check . || true

          # status
          if [ "${LINT_ISSUES}" -eq 0 ]; then
            echo '::set-output name=status::success'
            exit 0
          else
            echo '::set-output name=status::failure'
            exit 1
          fi
      - name: Prepare success Slack notification
        if: success()
        run: echo "SLACK_CUSTOM_PAYLOAD=${SLACK_CUSTOM_PAYLOAD}" >> $GITHUB_ENV
        env:
          SLACK_CUSTOM_PAYLOAD: '{"channel":"${{ secrets.SLACK_CHANNEL }}","attachments":[{"color":"#2eb886","fallback":"GitHub Actions {{ GITHUB_WORKFLOW }} workflow {{ GITHUB_JOB_NAME }} job of {{ GITHUB_REPOSITORY }}@{{ BRANCH_NAME }} by {{ GITHUB_ACTOR }} has passed with no issues","blocks":[{"type":"section","text":{"type":"mrkdwn","text":"GitHub Actions *<https://github.com/{{ GITHUB_REPOSITORY }}/actions/runs/{{ GITHUB_RUN_ID }}|{{ GITHUB_WORKFLOW }}>* workflow *{{ GITHUB_JOB_NAME }}* job of *<https://github.com/{{ GITHUB_REPOSITORY }}|{{ GITHUB_REPOSITORY }}>@<https://github.com/{{ GITHUB_REPOSITORY }}/tree/{{ BRANCH_NAME }}|{{ BRANCH_NAME }}>* by *{{ GITHUB_ACTOR }}* has passed with no issues"}}]}]}'
      - name: Prepare failure Slack notification
        if: failure()
        run: echo "SLACK_CUSTOM_PAYLOAD=${SLACK_CUSTOM_PAYLOAD}" >> $GITHUB_ENV
        env:
          SLACK_CUSTOM_PAYLOAD: '{"channel":"${{ secrets.SLACK_CHANNEL }}","attachments":[{"color":"#ed2f00","fallback":"GitHub Actions {{ GITHUB_WORKFLOW }} workflow {{ GITHUB_JOB_NAME }} job of {{ GITHUB_REPOSITORY }}@{{ BRANCH_NAME }} by {{ GITHUB_ACTOR }} has failed with {{ LINT_ISSUES }} issues","blocks":[{"type":"section","text":{"type":"mrkdwn","text":"GitHub Actions *<https://github.com/{{ GITHUB_REPOSITORY }}/actions/runs/{{ GITHUB_RUN_ID }}|{{ GITHUB_WORKFLOW }}>* workflow *{{ GITHUB_JOB_NAME }}* job of *<https://github.com/{{ GITHUB_REPOSITORY }}|{{ GITHUB_REPOSITORY }}>@<https://github.com/{{ GITHUB_REPOSITORY }}/tree/{{ BRANCH_NAME }}|{{ BRANCH_NAME }}>* by *{{ GITHUB_ACTOR }}* has failed with *{{ LINT_ISSUES }}* issues"}},{"type":"section","fields":[{"type":"mrkdwn","text":"*Prettier*:\n{{ LINT_ISSUES_PRETTIER }}"}]}]}]}'
      - name: Send Slack notification
        if: ${{ !env.ACT && always() }}
        uses: Ilshidur/action-slack@2.1.0
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
